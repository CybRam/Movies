import java.io.IOException;
import java.io.PrintWriter;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

public class MovieDriver2 {

    public static void main(String[] args) {
        String inputFile = "Movies1992.csv"; // Path to the file you want to read from
        String outputFile = "bad_movie_records.txt"; // Path to the new file you want to create
        Scanner reader = null;
        PrintWriter writer = null;
        try {
            reader = new Scanner(new FileInputStream(inputFile));
            writer = new PrintWriter(new FileOutputStream(outputFile));

        } catch (FileNotFoundException e){
			System.out.println("Problem opening files.");
			System.exit(0);
		}catch (IOException e) {
            System.out.println("An error occurred: " + e.getMessage());
            e.printStackTrace();
        }
        
        PrintWriter writerTry = null;
        try
		{
			writerTry = new PrintWriter(new FileOutputStream("chicken.txt"));
		}
		catch (FileNotFoundException e){
		System.out.println("Problem opening files.");
		System.exit(0);
		}
        
        while(reader.hasNextLine())
		{
			String line = reader.nextLine();
			try {
				if(validateMovie(line)){
					writer.println(line);
				}
				else
				{				
					writerTry.println(line);
				}
			} catch (BadYearException e) {
				writer.println(line);
			} catch (BadDurationException e) {
				writer.println(line);
			} catch (BadScoreException e) {
				writer.println(line);
			} catch (BadRatingException e) {
				writer.println(line);
			} catch (BadGenreException e) {
				writer.println(line);
			} catch (ExcessFieldsException e) {
				writer.println(line);
			}  
		}
        
        writerTry.close();
        reader.close();
        writer.close();
		}

    // Validate Method for semantic errors
    public static boolean validateMovie(String line) throws BadYearException, BadDurationException, 
    BadScoreException,BadRatingException,BadGenreException, ExcessFieldsException
    {
    	boolean invalidRecord = false;
    	
    	int year = 0;
    	String title = null;
    	int duration = 0;
    	String genre = null;
    	String rating = null;
    	double score = 0.0;
    	String director = null;
    	String actor1 = null;
    	String actor2 = null;
    	String actor3 = null;
    	String excess = null;
    	
    	String[] array = new String[10];
    	// Initialize variables
        String token = "";
        boolean insideQuotes = false;
        int j = 0;
        try {
        	// Iterate over each character in the CSV data
            for (int i = 0; i< line.toCharArray().length;i++) {
                if (line.toCharArray()[i] == '\"') {
                    // Toggle the insideQuotes flag when encountering a double quote
                    insideQuotes = !insideQuotes;
                } else if ((line.toCharArray()[i] == ',' || i == line.toCharArray().length-1) && !insideQuotes) {
                    // Found a comma outside of quotes, process the token
                    array[j] = token;
                    j++;
                    token = ""; // Reset the token
                } else {
                    // Add the character to the current token
                    token += line.toCharArray()[i];
                }
        }
            try {
            	
            	year = Integer.parseInt(array[0]);
            	
        	}catch(NumberFormatException e) {
        		throw new BadYearException();
        	}
            title = array[1];
            try {
            	
            	duration = Integer.parseInt(array[2]);
            	
            }catch(NumberFormatException e) {
        		throw new BadDurationException();
        	}
            genre = array[3];
            rating = array[4];
            try {
            	
            	score = Double.parseDouble(array[5]);
            	
            }catch(NumberFormatException e) {
        		throw new BadScoreException();
        	}
            director = array[6];
            actor1 = array[7];
            actor2 = array[8];
            actor3 = array[9];   
             
        }catch(IndexOutOfBoundsException e) {	
        	
			throw new ExcessFieldsException();
        
        }
        
        String[] validRatings = {"PG", "Unrated", "G", "R", "PG-13", "NC-17"};
        String[] validGenres = {"musical", "comedy", "animation", "adventure", "drama",
    	        "crime", "biography", "horror", "action", "documentary", "fantasy",
    	        "mystery", "sci-fi", "family", "romance", "thriller", "western"};
        
        boolean validRating = false;
    	boolean validGenre = false;
    	
    	for(int i = 0; i < validRatings.length; i++) {
    		if(validRatings[i].equals(rating)){
				validRating = true;
			}
    	}
    	for(int i = 0; i < validGenres.length; i++){			
			if(genre.equalsIgnoreCase(validGenres[i])){
				validGenre = false;
			}
		}

		
    	if (year < 1990 || year > 1999) {
    		
    		throw new BadYearException();
    		
    	}
    	else if (duration < 30 || duration > 300) {

    		throw new BadDurationException();
    		
    	}
    	else if(score > 10.0 ) {

    		throw new BadScoreException();
    		
    	}else if(validRating == true) {

    		throw new BadRatingException();
    		
    	} else if (validGenre == true){

    		throw new BadGenreException();
    		
    	}
    	
    	return invalidRecord;
    	}

}

String inputFile = "part1_manifest.txt"; // Path to the file you want to read from
        String outputFile = "bad_movie_records.txt"; // Path to the new file you want to create
        Scanner reader = null;
        Scanner reader2 = null;
        PrintWriter writer = null;
        int count = 1;
        
        try {
            reader = new Scanner(new FileInputStream(inputFile));
            writer = new PrintWriter(new FileOutputStream(outputFile));

        } catch (FileNotFoundException e){
			System.out.println("Problem opening files");
			System.exit(0);
		} catch (IOException e) {
            System.out.println("An error occurred: " + e.getMessage());
            e.printStackTrace();
        }
        
        while(reader.hasNextLine()) {
        	String movieFile = reader.nextLine();
        	
        	try {
        	reader2 = new Scanner(new FileInputStream(movieFile));
        	} catch (FileNotFoundException e){
    			System.out.println("Problem opening files");
    			System.exit(0);
    		}catch (IOException e) {
                System.out.println("An error occurred: " + e.getMessage());
                e.printStackTrace();
            }
        
	        writer.println(movieFile);
			
	        while(reader2.hasNextLine())
			{
				String line = reader2.nextLine();
				try {
					if(validateMovie(line)){
						writer.println(count + " " + line);
					}
					count++;
				}catch (MissingFieldsException e) {
					writer.println(count + " " + line);
					writer.println(e.getMessage());
					count++;
				} catch (BadYearException e) {
					writer.println(count + " " + line);
					writer.println(e.getMessage());
					count++;
				} catch (BadDurationException e) {
					writer.println(count + " " + line);
					writer.println(e.getMessage());
					count++;
				} catch (BadScoreException e) {
					writer.println(count + " " + line);
					writer.println(e.getMessage());
					count++;
				} catch (BadRatingException e) {
					writer.println(count + " " + line);
					writer.println(e.getMessage());
					count++;

				} catch (BadGenreException e) {
					writer.println(count + " " + line);
					writer.println(e.getMessage());
					count++;
				} catch (ExcessFieldsException e) {
					writer.println(count + " " + line);
					writer.println(e.getMessage());
					count++;
				} catch (BadTitleException e) {
					writer.println(count + " " + line);
					writer.println(e.getMessage());
					count++;
				} catch (BadNameException e) {
					writer.println(count + " " + line);
					writer.println(e.getMessage());	
					count++;
				} 
				
			}
	        count = 1;
        }
        
        reader2.close();
        reader.close();
        writer.close();
